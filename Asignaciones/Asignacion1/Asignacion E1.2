//Importamos las librerias necesarias.
#include<iostream>
#include<vector>
#include<string>
#include<ctime>

//Incluimos el namespace std.
using namespace std;

//Declaramos las funciones a utilizar.
vector<string> generateInventory(vector<string> allItems);
vector<string> pickUpInventory(vector<string> inventory, vector<string> allItems);
vector<string> openInventory(vector<string> inventory, vector<string> &allItems);
vector<string> opaqueCraftMenu(vector<string> inventory);
vector<string> replace(string rawCrystal, string opaqueCrystal, vector<string> inventory);
vector<string> replaceCrystal1(string crystal1, string ironPlateReplace, vector<string> allItems);
vector<string> replaceCrystal2(string crystal2, string ironPlateReplace, vector<string> allItems);
vector<string> replaceCrystal3(string crystal3, string ironPlateReplace, vector<string> allItems);
bool createOpaque(string rawCrystal, vector<string> inventory);
bool uniqueCrystalVerification(vector<string> inventory);

//Funcion para generar el inventario.
vector<string> generateInventory(vector<string> allItems)
{
	//Declaramos el inventario.
	vector<string> randomInventory(7, "NA");

	//Variables para el uso de rand.
	int randomItemPos;
	int min = 0;
	int max = allItems.size() - 1;

	//Variables booleanos que determinan si hay un cristal en el inventario, para que solo haya un cristal unico y determinar la cantidad maxima de fishermen plate.
	bool containsCrystal = false;
	bool longBooleanExpression;
	bool shortBooleanExpression;
	

	//Variable de contador para el ciclo while.
	int counter = 0;
	
	//Ciclo para llenar el inventario de manera aleatoria.
	while (counter < randomInventory.size())
	{
		//Para la posicion random
		randomItemPos = rand() % (max - min + 1) + min;

		//Verificar que solo exista 1 cristal en el inventario.
		containsCrystal = uniqueCrystalVerification(randomInventory);

		//Si el item random que se escoge es un cristal y hay un cristal en el inventario, este cambiara a true.
		longBooleanExpression = ((allItems[randomItemPos] == "Crystallized Azure Dragon's Tears") || (allItems[randomItemPos] == "Crystallized Exiled Heretic's Bone") || (allItems[randomItemPos] == "Crystallized Great Feline's Ash")) && containsCrystal;

		//Si existen 3 fishermen plate en el inventario este se volvera true
		shortBooleanExpression = (count(randomInventory.begin(), randomInventory.end(), "Fishermen's Plate") >= 3) && (allItems[randomItemPos] == "Fishermen's Plate");

		//Agregara cualquier cosa siempre y cuando no exista un cristal.
		if (!longBooleanExpression && !shortBooleanExpression)
		{
			randomInventory[counter] = allItems[randomItemPos];
			counter++; 
		}
	}
	system("CLS");
	cout << "INVENTORY GENERATED! \n\n" << endl;
	system("pause");
	return randomInventory;
}

//Funcion para generar nuevos objetos y que el usuario los recoja.
vector<string> pickUpInventory(vector<string>inventory, vector<string> allItems)
{
	//Vector para los items que se podran recoger.
	vector<string> pickItemsInventory(5);

	//Variables para entrada del usuario, contador y para crea las posiciones random de los items.
	int userInput;
	int randomItemPos;
	int min = 0;
	int max = allItems.size() - 1;
	int counter = 0;

	//Booleanas para mantener el inventario abierto y determinar la cantidad de objetos y cristales sean la cantidad posible(1 cristal y maximo 3 fishermen plate).
	bool pickUpInventoryOpened = true;
	bool containsCrystal = false;
	bool longBooleanExpression;
	bool shortBooleanExpression;
	bool noMoreFishPls;

	//Ciclo que genera los 5 objetos aleatorias para escoger del usuario.
	while (counter < pickItemsInventory.size())
	{
		//Para la posicion random
		randomItemPos = rand() % (max - min + 1) + min;

		//Verificar que solo exista 1 cristal en el inventario
		containsCrystal = uniqueCrystalVerification(pickItemsInventory);

		//Si el item random que se escoge es un cristal y hay un cristal en el inventario, este cambiara a true.
		longBooleanExpression = ((allItems[randomItemPos] == "Crystallized Azure Dragon's Tears") || (allItems[randomItemPos] == "Crystallized Exiled Heretic's Bone") || (allItems[randomItemPos] == "Crystallized Great Feline's Ash")) && containsCrystal;

		//Si existen 3 fishermen plate en el inventario este se volvera true
		shortBooleanExpression = (count(pickItemsInventory.begin(), pickItemsInventory.end(), "Fishermen's Plate") >= 3) && (allItems[randomItemPos] == "Fishermen's Plate");

		//Agregara cualquier cosa siempre y cuando no exista un cristal
		if (!longBooleanExpression && !shortBooleanExpression)
		{
			pickItemsInventory[counter] = allItems[randomItemPos];
			counter++;
		}
	}

	//Ciclo para mantener el recolector de objetos abierto.
	while (pickUpInventoryOpened)
	{
		system("CLS");
		cout << "===============================================================" << endl;
		cout << "= = ITEMS PICK UP = =" << "\n" << endl;

		//Ciclo que itera sobre los pick up items y lo imprime.
		for (int counter = 0; counter < pickItemsInventory.size(); counter++)
		{
			cout << counter + 1 << ". " << pickItemsInventory[counter] << endl;
		}
		cout << pickItemsInventory.size() + 1 << ". " << "EXIT" << endl;
		cout << "===============================================================" << endl;
		cout << "AWAITING USER INPUT:  "; cin >> userInput;

		//If para determinar los objetos que pasaran al inventario.
		if (userInput <= pickItemsInventory.size())
		{
			//Bool para determinar que ya existen 3 fishermen plate en el inventory.
			noMoreFishPls = (count(inventory.begin(), inventory.end(), "Fishermen's Plate") >= 3);

			//If que determinar si al haber un cristal existente en el inventario este no sera incluido en el mismo.
			if (((pickItemsInventory[userInput - 1] == "Crystallized Azure Dragon's Tears") || (pickItemsInventory[userInput - 1] == "Crystallized Exiled Heretic's Bone") || (pickItemsInventory[userInput - 1] == "Crystallized Great Feline's Ash")) && uniqueCrystalVerification(inventory))
			{
				cout << "Sorry, but you can only have one Crystals at time." << endl;
				system("PAUSE");
			}

			//Else if que a;ade los nuevos objetos al inventario.
			else if ((pickItemsInventory[userInput - 1] == "Fishermen's Plate") || (pickItemsInventory[userInput - 1] == "Iron Plate") || (pickItemsInventory[userInput - 1] == "Crystallized Azure Dragon's Tears") || (pickItemsInventory[userInput - 1] == "Crystallized Exiled Heretic's Bone") || (pickItemsInventory[userInput - 1] == "Crystallized Great Feline's Ash"))
			{
				//If/Else if para limitar la capacidad del inventario y enviar el item seleccionado al inventario.
				if (inventory.size() >= 20)
				{
					cout << "INVENTORY FULL" << endl;
					system("pause");
				}

				//Else if que si existen 3 fishermen plate en el inventario y el usuario intenta escoger uno mas este no lo permitira.
				else if (noMoreFishPls && pickItemsInventory[userInput - 1] == "Fishermen's Plate")
				{
					cout << "Sorry, but you can only have three Fishermen's Plate at time." << endl;
					system("PAUSE");
				}

				else if (inventory.size() < 20)
				{
					inventory.push_back(pickItemsInventory[userInput - 1]);
					cout << "New Item Added!" << endl;
					cout << "You have " << inventory.size() << " out of 20." << endl;
					system("pause");
					pickItemsInventory.erase(pickItemsInventory.begin() + userInput - 1);
				}
			}
		}

		else if (userInput == pickItemsInventory.size() + 1)
		{
			pickUpInventoryOpened = false;
		}
	}
	return inventory;
}

//Funcion para verificar si ya existe un cristal en el inventario.
bool uniqueCrystalVerification(vector<string> inventory)
{ 
	int counter = 0;

	//Declaramos variable que nos indica si ya existe un cristal.
	bool isCrystalPresent = false;
	bool longBooleanExpression;

	//Ciclo que verifica si ya un cristal.
	while ((counter < inventory.size()) && (!isCrystalPresent))
	{
		//Verificacion de si existen cristales
		longBooleanExpression = (inventory[counter] == "Crystallized Azure Dragon's Tears") || (inventory[counter] == "Crystallized Exiled Heretic's Bone") || (inventory[counter] == "Crystallized Great Feline's Ash");

		//Si existe el cristal cambiar el valor a true
		if (longBooleanExpression)
		{
			isCrystalPresent = true;
		}

		//Aumentar el counter, el while no lo realiza.
		counter++;
	}
	return isCrystalPresent;
}

//Funcion para el inventario.
vector<string> openInventory(vector<string> inventory, vector<string> &allItems)
{
	//Booleana para abrir el inventaro y determinar si se destruyo algun cristal.
	bool inventoryOpened = true;

	//Variable para entrada del usuario.
	int userInput;
	string userInput2;

	//Ciclo para mantener el inventario abierto.
	while (inventoryOpened) 
	{
		system("CLS");
		cout << "===============================================================" << endl;
		cout << "= = INVENTORY = =" << "\n" << endl;

		//Ciclo que itera sobre el inventario y lo imprime.
		for (int counter = 0; counter < inventory.size(); counter++)
		{
			cout << counter + 1 << ". " << inventory[counter] << endl;
		}

		cout << inventory.size() + 1 << ". " << "EXIT" << endl;
		cout << "===============================================================" << endl;
		cout << "AWAITING USER INPUT:  "; cin >> userInput;

		//Si el usuario introduce el número de algún item, entonces borra el item usando erase(). De otra forma, cierra el inventory. 
		if (userInput <= inventory.size()) 
		{
			//If para que detecte crystales crudo u opacos y preguntar al usuario si esta seguro de borrarlos del inventario.
			if (inventory[userInput - 1] == "Crystallized Azure Dragon's Tears" || inventory[userInput - 1] == "Crystallized Exiled Heretic's Bone" || inventory[userInput - 1] == "Crystallized Great Feline's Ash" || inventory[userInput - 1] == "Opaque Azure Dragon's Sapphire" || inventory[userInput - 1] == "Opaque Humanity's Emerald" || inventory[userInput - 1] == "Opaque Feline's Ruby")
			{
				cout << " Are you sure you want to destroy this crystal? You won’t be able to gather this unique crystal anymore." << endl;
				cout << " Press Y/N " << endl;
				cin >> userInput2;

				//If's que determinara que cristal se escoge y lo reemplazara, para que no se vuelva a generar por el generador o el menu de recoleccion.
				if ((userInput2 == "Y" || userInput2 == "y") && (inventory[userInput - 1] == "Crystallized Azure Dragon's Tears"))
				{
					string crystal1 = "Crystallized Azure Dragon's Tears";
					string ironPlateReplace = "Iron Plate";
					allItems = replaceCrystal1(crystal1, ironPlateReplace, allItems);
					inventory.erase(inventory.begin() + userInput - 1);
				}
				if ((userInput2 == "Y" || userInput2 == "y") && (inventory[userInput - 1] == "Crystallized Exiled Heretic's Bone"))
				{
					string crystal2 = "Crystallized Exiled Heretic's Bone";
					string ironPlateReplace = "Iron Plate";
					allItems = replaceCrystal2(crystal2, ironPlateReplace, allItems);	
					inventory.erase(inventory.begin() + userInput - 1);
				}
				if ((userInput2 == "Y" || userInput2 == "y") && (inventory[userInput - 1] == "Crystallized Great Feline's Ash"))
				{
					string crystal3 = "Crystallized Great Feline's Ash";
					string ironPlateReplace = "Iron Plate";
					allItems = replaceCrystal3(crystal3, ironPlateReplace, allItems);
					inventory.erase(inventory.begin() + userInput - 1);
				}
				if ((userInput2 == "Y" || userInput2 == "y") && (inventory[userInput - 1] == "Opaque Azure Dragon's Sapphire"))
				{
					inventory.erase(inventory.begin() + userInput - 1);
				}
				if ((userInput2 == "Y" || userInput2 == "y") && (inventory[userInput - 1] == "Opaque Humanity's Emerald"))
				{
					inventory.erase(inventory.begin() + userInput - 1);
				}
				if ((userInput2 == "Y" || userInput2 == "y") && (inventory[userInput - 1] == "Opaque Feline's Ruby"))
				{
					inventory.erase(inventory.begin() + userInput - 1);
				}
				else if (userInput2 == "N" || userInput2 == "n") 
				{
					cout << "WOOOW DON'T SCARED US LIKE THAT." << endl;
					system("pause");
				}
			}
			else if (inventory[userInput - 1] == "Fishermen's Plate" || inventory[userInput - 1] == "Iron Plate")
			{
				inventory.erase(inventory.begin() + userInput - 1);
			}
		}
		else if (userInput == inventory.size() + 1) 
		{
			inventoryOpened = false;
		}
	}
	return allItems, inventory;
}

//Funcion para crear opaque crystals.
vector<string> opaqueCraftMenu(vector<string> inventory)
{
	//Variable para mantener el menu abierto.
	bool craftMenuOpen = true;

	//Entrada del usuario.
	int craftMenuOption;

	//Ciclo while para mantener el menu abierto.
	while (craftMenuOpen) 
	{
		//Variables para crear el item.
		string rawCrystal = "NA";
		string opaqueCrystal = "NA";

		//Variable para reconocer si es el cristal deseado 
		bool isCrafted = false;

		//UI del menu.
		system("CLS");
		cout << "===============================================================" << endl;
		cout << "= = OPAQUE CRYSTAL CRAFTING = =" << "\n" << endl;
		cout << "1. Opaque Azure Dragon's Sapphire" << endl;
		cout << "2. Opaque Humanity's Emerald" << endl;
		cout << "3. Opaque Feline's Ruby" << endl;
		cout << "4. Exit" << endl;
		cout << "===============================================================" << endl;
		cout << "AWAITING USER INPUT:  "; cin >> craftMenuOption;

		//Switch case para controlar el menu.
		switch (craftMenuOption) 
		{

		case 1:
			rawCrystal = "Crystallized Azure Dragon's Tears";
			opaqueCrystal = "Opaque Azure Dragon's Sapphire";
			isCrafted = createOpaque(rawCrystal, inventory);
			break;

		case 2:
			rawCrystal = "Crystallized Exiled Heretic's Bone";
			opaqueCrystal = "Opaque Humanity's Emerald";
			isCrafted = createOpaque(rawCrystal, inventory);
			break;

		case 3:
			rawCrystal = "Crystallized Great Feline's Ash";
			opaqueCrystal = "Opaque Feline's Ruby";
			isCrafted = createOpaque(rawCrystal, inventory);
			break;

		case 4:
			craftMenuOpen = false;
			break;

		default:
			system("CLS");
			break;
		}

		//Cambiara el inventario cuando se crea un objeto nuevo.
		if (isCrafted)
		{
			inventory = replace(rawCrystal, opaqueCrystal, inventory);
			cout << "Opaque crystal crafted!" << endl;
			system("pause");
		}
	}
	return inventory;
}

//Función que verifica si existe el cristal adecuado en el inventario.
bool createOpaque(string rawCrystal, vector<string> inventory)
{
	bool isCrafted = false;

	if (find(inventory.begin(), inventory.end(), rawCrystal) != inventory.end()) 
	{
		isCrafted = true;
	}
	return isCrafted;
}

//Función que reemplaza el rawCrystal por el opaqueCrystal. 
vector<string> replace(string rawCrystal, string opaqueCrystal, vector<string> inventory) 
{
	int counter = 0;
	bool replaced = false;

	while (counter < inventory.size() && !replaced)
	{
		if (inventory[counter] == rawCrystal)
		{
			inventory[counter] = opaqueCrystal;
			replaced = true;
		}
		counter++;
	}
	return inventory;
}

//Funcion que reemplaza azure dragon tears por un iron plate.
vector<string> replaceCrystal1(string crystal1, string ironPlateReplace, vector<string> allItems)
{
	int counter = 0;
	bool replaced = false;

	while (counter < allItems.size() && !replaced)
	{
		if (allItems[counter] == crystal1)
		{
			allItems[counter] = ironPlateReplace;
			replaced = true;
		}
		counter++;
	}
	return allItems;
}

//Funcion que reemplaza heretic bone por un iron plate.
vector<string> replaceCrystal2(string crystal2, string ironPlateReplace, vector<string> allItems)
{
	int counter = 0;
	bool replaced = false;

	while (counter < allItems.size() && !replaced)
	{
		if (allItems[counter] == crystal2)
		{
			allItems[counter] = ironPlateReplace;
			replaced = true;
		}
		counter++;
	}
	return allItems;
}

//Funcion que reemplaza feline ash por un iron plate.
vector<string> replaceCrystal3(string crystal3, string ironPlateReplace, vector<string> allItems)
{
	int counter = 0;
	bool replaced = false;

	while (counter < allItems.size() && !replaced)
	{
		if (allItems[counter] == crystal3)
		{
			allItems[counter] = ironPlateReplace;
			replaced = true;
		}
		counter++;
	}
	return allItems;
}

int main()
{
	//RANDOM SEED.
	srand(time(0));

	//Vector para el inventario y los items disponibles.
	vector<string> inventory;
	vector<string> allItems = { "Crystallized Azure Dragon's Tears", "Crystallized Exiled Heretic's Bone", "Crystallized Great Feline's Ash", "Fishermen's Plate", "Iron Plate" };

	//Booleana para mantener el menu abierto.
	bool menuOpen = true;

	//Entrada del usuario.
	int mainMenuOption;

	//Ciclo while para mantener el menu abierto.
	while (menuOpen) 
	{

		//Este comando limpia la ventana de comandos. 
		system("CLS");

		//UI para el menu
		cout << "===============================================================" << endl;
		cout << "= = MAIN MENU = =" << "\n" << endl;
		cout << "1. INVENTORY GENERATOR (FOR DEVELOPERS)" << endl;
		cout << "2. OPEN INVENTORY" << endl;
		cout << "3. PICK UP ITEMS" << endl;
		cout << "4. CREATE OPAQUE CRYSTAL" << endl;
		cout << "5. EXIT GAME" << endl;
		cout << "===============================================================" << endl;

		//Leemos la entrada del usuario. 
		cout << "AWAITING USER INPUT:  "; cin >> mainMenuOption;

		//Switch para el menu de entrada del usuario.
		switch (mainMenuOption) 
		{

		case 1:
			inventory = generateInventory(allItems);
			break;

		case 2:
			inventory = openInventory(inventory, allItems);
			break;

		case 3:
			inventory = pickUpInventory(inventory, allItems);
			break;

		case 4:
			inventory = opaqueCraftMenu(inventory);
			break;

		case 5:
			menuOpen = false;
			break;

		default:
			system("CLS");
			break;
		}
	}
	return 0;
}
